{"version":3,"sources":["components/Header.js","components/NumButton.js","components/ClearButton.js","components/EqualButton.js","components/OperationButton.js","components/ScreenDiv.js","components/AlertEl.js","components/CalcBody.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","fluid","className","Container","NumButton","props","Button","variant","onClick","handleButtonClick","value","ClearButton","handleClear","EqualButton","handleEqual","OperationButton","operation","ScreenDiv","input","AlertEl","Alert","message","CalcBody","useState","mathProblem","setMathProblem","alert","setAlert","alertMessage","setAlertMessage","event","newState","concat","target","typoAlert","showAlert","Row","Col","xl","lg","md","sm","xs","splitStr","split","length","num1","parseInt","num2","sum","isNaN","answerState","difference","product","quotient","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iRAKe,SAASA,IACtB,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,UACzB,kBAACC,EAAA,EAAD,KACE,uDACA,+F,mBCLO,SAASC,EAAUC,GAChC,OACE,kBAACC,EAAA,EAAD,CACEJ,UAAU,UACVK,QAAQ,kBACRC,QAASH,EAAMI,kBACfC,MAAOL,EAAMK,OAEZL,EAAMK,OCRE,SAASC,EAAYN,GAClC,OACE,kBAACC,EAAA,EAAD,CAAQJ,UAAU,UAAUK,QAAQ,iBAAiBC,QAASH,EAAMO,aAApE,SCFW,SAASC,EAAYR,GAClC,OACE,kBAACC,EAAA,EAAD,CACEJ,UAAU,UACVK,QAAQ,kBACRC,QAASH,EAAMS,aAHjB,KCFW,SAASC,EAAgBV,GACtC,OAAO,kBAACC,EAAA,EAAD,CAAQJ,UAAU,UAASK,QAAQ,oBAAoBC,QAASH,EAAMI,kBAAmBC,MAAOL,EAAMW,WAAYX,EAAMW,WCHlH,SAASC,EAAUZ,GAC9B,OACI,yBAAKH,UAAU,kBACX,8BAAOG,EAAMa,Q,YCFV,SAASC,EAAQd,GAC5B,OAAO,kBAACe,EAAA,EAAD,CAAOb,QAAQ,UACjBF,EAAMgB,S,oBCKA,SAASC,IAAY,IAAD,EACKC,mBAAS,IADd,mBAC1BC,EAD0B,KACbC,EADa,OAEPF,mBAAS,QAFF,mBAE1BG,EAF0B,KAEnBC,EAFmB,OAGOJ,mBAAS,IAHhB,mBAG1BK,EAH0B,KAGZC,EAHY,KAK3BpB,EAAoB,SAACqB,GACzB,IAAMC,EAAWP,EAAYQ,OAAOF,EAAMG,OAAOvB,OACjDe,EAAeM,IAGXG,EAAY,WAChBP,EAAS,QACTE,EAAgB,uCAoElB,OACE,kBAAC1B,EAAA,EAAD,CAAWD,UAAU,aAPL,WAChB,GAAc,SAAVwB,EACF,OAAO,kBAACP,EAAD,CAASE,QAASO,IAMxBO,GACD,kBAACC,EAAA,EAAD,CAAKlC,UAAU,0BACb,kBAACmC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,MACrC,kBAACzB,EAAD,CAAWC,MAAOM,MAGtB,kBAACY,EAAA,EAAD,CAAKM,GAAI,EAAGF,GAAI,EAAGD,GAAI,EAAGrC,UAAU,0BAClC,kBAACmC,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAAC3B,EAAD,CACEC,UAAW,SACXP,kBAAmBA,MAIzB,kBAAC2B,EAAA,EAAD,CAAKM,GAAI,EAAGF,GAAI,EAAGD,GAAI,EAAGrC,UAAU,0BAClC,kBAACmC,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAAC3B,EAAD,CACEC,UAAW,MACXP,kBAAmBA,MAIzB,kBAAC2B,EAAA,EAAD,CAAKM,GAAI,EAAGF,GAAI,EAAGD,GAAI,EAAGrC,UAAU,0BAClC,kBAACmC,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAAC3B,EAAD,CACEC,UAAW,MACXP,kBAAmBA,MAIzB,kBAAC2B,EAAA,EAAD,CAAKM,GAAI,EAAGF,GAAI,EAAGD,GAAI,EAAGrC,UAAU,0BAClC,kBAACmC,EAAA,EAAD,CAAKK,GAAI,GACP,kBAAC/B,EAAD,CAAaC,YAzED,SAACkB,GACnBL,EAAe,IACfE,EAAS,QACTE,EAAgB,QAwEZ,kBAACQ,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACtC,EAAD,CAAWM,MAAO,EAAGD,kBAAmBA,KAE1C,kBAAC4B,EAAA,EAAD,CAAKK,GAAI,GACP,kBAAC7B,EAAD,CAAaC,YAnID,SAACgB,GACnB,IACMa,EADcnB,EACSoB,MAAM,KACnC,GAAID,EAASE,OAAS,EAKpB,OAJAhB,EACE,iHAEFF,EAAS,QAGX,IAAMmB,EAAOC,SAASJ,EAAS,IACzBK,EAAOD,SAASJ,EAAS,IAC/B,GAAoB,MAAhBA,EAAS,GAAY,CACvB,IAAMM,EAAMH,EAAOE,EACnB,GAAIE,MAAMD,GACRf,QACK,CACL,IAAMiB,EAAc3B,EAAYQ,OAAZ,aAAyBiB,IAC7CxB,EAAe0B,SAEZ,GAAoB,MAAhBR,EAAS,GAAY,CAC9B,IAAMS,EAAaN,EAAOE,EAC1B,GAAIE,MAAME,GACRlB,QACK,CACL,IAAMiB,EAAc3B,EAAYQ,OAAZ,aAAyBoB,IAC7C3B,EAAe0B,SAEZ,GAAoB,MAAhBR,EAAS,GAAY,CAC9B,IAAMU,EAAUP,EAAOE,EACvB,GAAIE,MAAMG,GACRnB,QACK,CACL,IAAMiB,EAAc3B,EAAYQ,OAAZ,aAAyBqB,IAC7C5B,EAAe0B,SAEZ,GAAoB,SAAhBR,EAAS,GAAY,CAC9B,IAAMW,EAAWR,EAAOE,EACxB,GAAIE,MAAMI,GACRpB,QACK,CACL,IAAMiB,EAAc3B,EAAYQ,OAAZ,aAAyBsB,IAC7C7B,EAAe0B,SAGjBxB,EAAS,QACTE,EACE,0FAsFA,kBAACQ,EAAA,EAAD,CAAKK,GAAI,GACP,kBAAC3B,EAAD,CACEC,UAAW,MACXP,kBAAmBA,O,YCvIhB8C,MArBf,WACE,OACE,yBAAKrD,UAAU,OACb,kBAACH,EAAD,MACA,kBAACI,EAAA,EAAD,KACE,kBAACiC,EAAA,EAAD,CAAKlC,UAAU,6BACb,kBAACmC,EAAA,EAAD,CAAKK,IAAE,EAACH,GAAG,MAGX,kBAACF,EAAA,EAAD,CAAKG,GAAG,KACN,kBAAClB,EAAD,OAEF,kBAACe,EAAA,EAAD,CAAKK,IAAE,EAACH,GAAG,UCPDiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpD,a","file":"static/js/main.96b08c32.chunk.js","sourcesContent":["import React from 'react';\nimport { Jumbotron, Container } from 'react-bootstrap';\n\nimport './style.css';\n\nexport default function Header() {\n  return (\n    <Jumbotron fluid className=\"header\">\n      <Container>\n        <h1>Four Function Calulator</h1>\n        <p>This simple calculator handles single operation math problems.</p>\n      </Container>\n    </Jumbotron>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport \"./style.css\";\n\nexport default function NumButton(props) {\n  return (\n    <Button\n      className=\"buttons\"\n      variant=\"outline-primary\"\n      onClick={props.handleButtonClick}\n      value={props.value}\n    >\n      {props.value}\n    </Button>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './style.css'\n\nexport default function ClearButton(props) {\n  return (\n    <Button className=\"buttons\" variant=\"outline-danger\" onClick={props.handleClear}>\n      Clear\n    </Button>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './style.css';\n\nexport default function EqualButton(props) {\n  return (\n    <Button\n      className=\"buttons\"\n      variant=\"outline-success\"\n      onClick={props.handleEqual}\n    >\n      =\n    </Button>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './style.css'\n\nexport default function OperationButton(props) {\n  return <Button className=\"buttons\"variant=\"outline-secondary\" onClick={props.handleButtonClick} value={props.operation}>{props.operation}</Button>;\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function ScreenDiv(props) {\n    return (\n        <div className=\"screen-display\">\n            <span>{props.input}</span>\n        </div>\n    )\n}","import React from 'react';\n\nimport Alert from 'react-bootstrap/Alert';\n\nexport default function AlertEl(props) {\n    return <Alert variant=\"danger\">\n        {props.message}\n    </Alert>\n}","import React, { useState } from 'react';\nimport NumButton from './NumButton';\nimport ClearButton from './ClearButton';\nimport EqualButton from './EqualButton';\nimport OperationButton from './OperationButton';\nimport ScreenDiv from './ScreenDiv';\nimport AlertEl from './AlertEl';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport './style.css';\n\nexport default function CalcBody() {\n  const [mathProblem, setMathProblem] = useState('');\n  const [alert, setAlert] = useState('hide');\n  const [alertMessage, setAlertMessage] = useState('');\n\n  const handleButtonClick = (event) => {\n    const newState = mathProblem.concat(event.target.value);\n    setMathProblem(newState);\n  };\n\n  const typoAlert = () => {\n    setAlert('show');\n    setAlertMessage('Oops! I think you may have a typo!');\n    return;\n  };\n\n  const handleEqual = (event) => {\n    const stateString = mathProblem;\n    const splitStr = stateString.split(' ');\n    if (splitStr.length > 3) {\n      setAlertMessage(\n        'Oops! This is a dumb calculator- You can only perform one operation at a time.  Positive numbers only...'\n      );\n      setAlert('show');\n      return;\n    }\n    const num1 = parseInt(splitStr[0]);\n    const num2 = parseInt(splitStr[2]);\n    if (splitStr[1] === '+') {\n      const sum = num1 + num2;\n      if (isNaN(sum)) {\n        typoAlert();\n      } else {\n        const answerState = mathProblem.concat(` = ${sum}`);\n        setMathProblem(answerState);\n      }\n    } else if (splitStr[1] === '-') {\n      const difference = num1 - num2;\n      if (isNaN(difference)) {\n        typoAlert();\n      } else {\n        const answerState = mathProblem.concat(` = ${difference}`);\n        setMathProblem(answerState);\n      }\n    } else if (splitStr[1] === 'x') {\n      const product = num1 * num2;\n      if (isNaN(product)) {\n        typoAlert();\n      } else {\n        const answerState = mathProblem.concat(` = ${product}`);\n        setMathProblem(answerState);\n      }\n    } else if (splitStr[1] === 'รท') {\n      const quotient = num1 / num2;\n      if (isNaN(quotient)) {\n        typoAlert();\n      } else {\n        const answerState = mathProblem.concat(` = ${quotient}`);\n        setMathProblem(answerState);\n      }\n    } else {\n      setAlert('show');\n      setAlertMessage(\n        'Hmmm, something went wrong...Check what you put into the calculator and try again.'\n      );\n    }\n  };\n\n  const handleClear = (event) => {\n    setMathProblem('');\n    setAlert('hide');\n    setAlertMessage('');\n  };\n\n  const showAlert = () => {\n    if (alert === 'show') {\n      return <AlertEl message={alertMessage} />;\n    }\n  };\n\n  return (\n    <Container className=\"calc-body\">\n      {showAlert()}\n      <Row className=\"justify-content-center\">\n        <Col xl=\"9\" lg=\"10\" md=\"12\" sm=\"11\" xs=\"11\">\n          <ScreenDiv input={mathProblem} />\n        </Col>\n      </Row>\n      <Row xs={2} md={4} lg={6} className=\"justify-content-center\">\n        <Col xs={3}>\n          <NumButton value={7} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={8} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={9} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <OperationButton\n            operation={' รท '}\n            handleButtonClick={handleButtonClick}\n          />\n        </Col>\n      </Row>\n      <Row xs={2} md={4} lg={6} className=\"justify-content-center\">\n        <Col xs={3}>\n          <NumButton value={4} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={5} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={6} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <OperationButton\n            operation={' x '}\n            handleButtonClick={handleButtonClick}\n          />\n        </Col>\n      </Row>\n      <Row xs={2} md={4} lg={6} className=\"justify-content-center\">\n        <Col xs={3}>\n          <NumButton value={1} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={2} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={3} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <OperationButton\n            operation={' - '}\n            handleButtonClick={handleButtonClick}\n          />\n        </Col>\n      </Row>\n      <Row xs={2} md={4} lg={6} className=\"justify-content-center\">\n        <Col xs={3}>\n          <ClearButton handleClear={handleClear} />\n        </Col>\n        <Col xs={3}>\n          <NumButton value={0} handleButtonClick={handleButtonClick} />\n        </Col>\n        <Col xs={3}>\n          <EqualButton handleEqual={handleEqual} />\n        </Col>\n        <Col xs={3}>\n          <OperationButton\n            operation={' + '}\n            handleButtonClick={handleButtonClick}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport CalcBody from './components/CalcBody';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"2\">\n          \n          </Col>\n          <Col md=\"6\">\n            <CalcBody/>\n          </Col>\n          <Col xs lg=\"2\">\n          \n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}